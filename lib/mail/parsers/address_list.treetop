module Mail
  grammar AddressList

    include Common

    rule primary
      address_list {
        def address_nodes
          additional = other_addresses.elements.map { |elem|
            elem.address_value
          }
        
          [first_address] + additional
        end
        
        def addresses
          address_nodes.map { |elem| elem.text_value }
        end

        def format
          address_nodes.map { |elem| elem.text_value }
        end
        
        def display_names
          address_nodes.map { |elem|
            elem.display_name_value
          }
        end
        
        def local_names
          address_nodes.map { |elem|
            if elem.respond_to?(:angle_addr)
              elem.angle_addr.addr_spec.local_name_value
            else
              elem.local_name_value
            end
          }
        end
        
        def domain_names
          address_nodes.map { |elem|
            if elem.respond_to?(:angle_addr)
              elem.angle_addr.addr_spec.domain_name_value
            else
              elem.domain_name_value
            end
          }
        end
        
      } / obs_addr_list
    end
    
  end
end